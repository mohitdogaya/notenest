
// import { useEffect, useState } from "react";
// import api from "../services/api";

// export default function Notes() {
//   const [notes, setNotes] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState(null);

//   // For new note
//   const [title, setTitle] = useState("");
//   const [content, setContent] = useState("");
//   const [addError, setAddError] = useState(null);

//   // For edit
//   const [editId, setEditId] = useState(null);
//   const [editTitle, setEditTitle] = useState("");
//   const [editContent, setEditContent] = useState("");
//   const [editError, setEditError] = useState(null);

//   useEffect(() => {
//     fetchNotes();
//   }, []);

//   const fetchNotes = async () => {
//     setLoading(true);
//     try {
//       const res = await api.get("/notes");
//       setNotes(res.data);
//       setError(null);
//     } catch {
//       setError("Failed to load notes.");
//     } finally {
//       setLoading(false);
//     }
//   };

//   const handleAddNote = async (e) => {
//     e.preventDefault();
//     setAddError(null);

//     if (!title || !content) {
//       setAddError("Title and content required.");
//       return;
//     }

//     try {
//       await api.post("/notes", { title, content });
//       setTitle("");
//       setContent("");
//       fetchNotes();
//     } catch {
//       setAddError("Failed to add note.");
//     }
//   };

//   const startEdit = (note) => {
//     setEditId(note._id);
//     setEditTitle(note.title);
//     setEditContent(note.content);
//     setEditError(null);
//   };

//   const cancelEdit = () => {
//     setEditId(null);
//     setEditTitle("");
//     setEditContent("");
//     setEditError(null);
//   };

//   const submitEdit = async (e) => {
//     e.preventDefault();
//     setEditError(null);

//     if (!editTitle || !editContent) {
//       setEditError("Title and content required.");
//       return;
//     }

//     try {
//       await api.put(`/notes/${editId}`, { title: editTitle, content: editContent });
//       cancelEdit();
//       fetchNotes();
//     } catch {
//       setEditError("Failed to update note.");
//     }
//   };

//   const deleteNote = async (id) => {
//     if (!window.confirm("Are you sure you want to delete this note?")) return;

//     try {
//       await api.delete(`/notes/${id}`);
//       fetchNotes();
//     } catch {
//       alert("Failed to delete note.");
//     }
//   };

//   return (
//     <div >
//       <h2 >Your Notes</h2>

//       {/* Add Note Form */}
//       <form onSubmit={handleAddNote} >
//         <input
//           type="text"
//           placeholder="Title"
//           value={title}
//           onChange={(e) => setTitle(e.target.value)}
//           required
//         />
//         <textarea
//           placeholder="Content"
//           value={content}
//           onChange={(e) => setContent(e.target.value)}
//           required
//         />
//         <button type="submit" >Add Note</button>
//         {addError && <p>{addError}</p>}
//       </form>

//       {/* Notes List */}
//       <ul>
//         {notes.length === 0 ? (
//           <p style={{ color: "#555" }}>No notes found.</p>
//         ) : (
//           notes.map((note) => (
//             <li key={note._id}>
//               {editId === note._id ? (
//                 <form onSubmit={submitEdit} >
//                   <input
//                     type="text"
//                     value={editTitle}
//                     onChange={(e) => setEditTitle(e.target.value)}
//                     required
//                   />
//                   <textarea
//                     value={editContent}
//                     onChange={(e) => setEditContent(e.target.value)}
//                     required
//                   />
//                   <div>
//                     <button type="submit">Save</button>
//                     <button
//                       type="button"
//                       onClick={cancelEdit}
//                     >
//                       Cancel
//                     </button>
//                   </div>
//                   {/* {editError>{editError}</p>} */}
//                 </form>
//               ) : (
//                 <>
//                   <h3>{note.title}</h3>
//                   <p >{note.content}</p>
//                   <div>
//                     <button onClick={() => startEdit(note)} >
//                       Edit
//                     </button>
//                     <button
//                       onClick={() => deleteNote(note._id)}
//                     >
//                       Delete
//                     </button>
//                   </div>
//                 </>
//               )}
//             </li>
//           ))
//         )}
//       </ul>
//     </div>
//   );
// }



home.jsx

// src/pages/Home.jsx
export default function Home() {
    return (
        <div className="min-h-screen w-full relative bg-black">
            {/* Ocean Abyss Background with Top Glow */}
            <div className="absolute inset-0 z-0"/>
            <div>
                <h1>
                    Welcome to NoteNest
                </h1>
                <p>
                    Your simple and elegant app to organize notes and folders with ease.
                    Perfect for students and trainees to stay productive and organized.
                </p>
                <div>
                    Use the navigation bar above to explore Folders, Notes, and About pages.
                </div>
            </div>
            {/* Your Content/Components */}
        </div>
    );
}





.panel {
  padding: 18px;
  border-radius: 12px;
  background: linear-gradient(180deg, rgba(255,255,255,0.03), rgba(255,255,255,0.01));
  border: 1px solid rgba(255,255,255,0.03);
}


.auth-container {
  max-width: 400px;
  margin: 50px auto;
  padding: 20px;
  border-radius: 12px;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  backdrop-filter: blur(10px);
  background: rgba(255, 255, 255, 0.05);
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.25);
}

/* Title */
.auth-title {
  text-align: center;
  margin-bottom: 20px;
  color: #fff;
}

/* Form */
.auth-form {
  display: flex;
  flex-direction: column;
}

/* Input */
.auth-input {
  width: 100%;
  padding: 10px;
  margin-bottom: 12px;
  border-radius: 6px;
  border: 1px solid rgba(255, 255, 255, 0.2);
  background: rgba(255, 255, 255, 0.1);
  font-size: 1rem;
  color: #fff;
  outline: none;
}

.auth-input::placeholder {
  color: rgba(255, 255, 255, 0.6);
}

/* Button */
.auth-button {
  width: 100%;
  padding: 10px;
  border-radius: 6px;
  border: none;
  background-color: #2980b9;
  color: white;
  font-weight: 600;
  cursor: pointer;
  font-size: 1rem;
  transition: all 0.3s ease;
}

.auth-button:hover {
  background-color: #1f6691;
}

/* Error Message */
.auth-error {
  color: #ff6b6b;
  margin-top: 10px;
  text-align: center;
}




// src/context/AuthContext.jsx
import { createContext, useState, useEffect } from "react";

export const AuthContext = createContext();

export function AuthProvider({ children }) {
  const [user, setUser] = useState(null);

  useEffect(() => {
    // Check token on mount
    const token = localStorage.getItem("token");
    if (token) {
      // For simplicity, just set user as logged in
      setUser({ token });
    }
  }, []);

  const login = (token) => {
    localStorage.setItem("token", token);
    setUser({ token });
  };

  const logout = () => {
    localStorage.removeItem("token");
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
}



// Notes copy.jsx - old version simple
import { useEffect, useState } from "react";
import api from "../services/api";
import { useNavigate } from "react-router-dom";
import "./notes.css";

export default function Notes() {
  const [notes, setNotes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // For edit
  const [editId, setEditId] = useState(null);
  const [editTitle, setEditTitle] = useState("");
  const [editContent, setEditContent] = useState("");
  const [editError, setEditError] = useState(null);

  const navigate = useNavigate();

  useEffect(() => {
    fetchNotes();
  }, []);

  const fetchNotes = async () => {
    setLoading(true);
    try {
      const res = await api.get("/notes");
      setNotes(res.data);
      setError(null);
    } catch {
      setError("Failed to load notes.");
    } finally {
      setLoading(false);
    }
  };

  const startEdit = (note) => {
    setEditId(note._id);
    setEditTitle(note.title);
    setEditContent(note.content);
    setEditError(null);
  };

  const cancelEdit = () => {
    setEditId(null);
    setEditTitle("");
    setEditContent("");
    setEditError(null);
  };

  const submitEdit = async (e) => {
    e.preventDefault();
    setEditError(null);

    if (!editTitle || !editContent) {
      setEditError("Title and content required.");
      return;
    }

    try {
      await api.put(`/notes/${editId}`, { title: editTitle, content: editContent });
      cancelEdit();
      fetchNotes();
    } catch {
      setEditError("Failed to update note.");
    }
  };

  const deleteNote = async (id) => {
    if (!window.confirm("Are you sure you want to delete this note?")) return;

    try {
      await api.delete(`/notes/${id}`);
      fetchNotes();
    } catch {
      alert("Failed to delete note.");
    }
  };

  return (
    <div className="notes-container">
      <h2>Your Notes</h2>

      <button className="add-note-btn" onClick={() => navigate("/notes/add")}>
        + Add Note
      </button>

      {loading && <p>Loading...</p>}
      {error && <p className="error-msg">{error}</p>}
      <div class className="middle">

        <ul className="notes-list">
          {notes.length === 0 ? (
            <p style={{ color: "#555" }}>No notes found.</p>
          ) : (
            notes.map((note) => (
              <li key={note._id}>
                {editId === note._id ? (
                  <form onSubmit={submitEdit}>
                    <input
                      type="text"
                      value={editTitle}
                      onChange={(e) => setEditTitle(e.target.value)}
                      required
                      placeholder="Title"
                    />
                    <textarea
                      value={editContent}
                      onChange={(e) => setEditContent(e.target.value)}
                      required
                      placeholder="Content"
                    />
                    <div className="button-group">
                      <button type="submit" className="edit-btn">Save</button>
                      <button type="button" onClick={cancelEdit}>
                        Cancel
                      </button>
                    </div>
                    {editError && <p className="error-msg">{editError}</p>}
                  </form>
                ) : (
                  <>
                    <h3>{note.title}</h3>
                    <p>{note.content}</p>
                    <div className="button-group">
                      <button onClick={() => startEdit(note)} className="edit-btn">
                        Edit
                      </button>
                      <button
                        onClick={() => deleteNote(note._id)}
                        className="delete-btn"
                      >
                        Delete
                      </button>
                    </div>
                  </>
                )}
              </li>
            ))
          )}
        </ul>
      </div>
    </div>
  );
}





